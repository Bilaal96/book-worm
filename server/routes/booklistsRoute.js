import { Router } from "express";

// All endpoints below are prefixed with /booklists
const router = Router();

// --- Make multiple fetch calls with Promise.all
// Google: make multiple fetch requests javascript using array of ids
// -- https://stackoverflow.com/questions/31710768/how-can-i-fetch-an-array-of-urls-with-promise-all
// -- https://www.codementor.io/@adititipnis/javascript-how-to-make-api-calls-for-each-value-in-an-array-and-get-an-array-of-results-v1sfcj11o

//! How can I cache fetch requests in react

/** CORE FUNCTIONALITY
 * --- BookList(s)
 * Create single (id is generated by DB)
 * Get ALL existing BookLists in Collection
 * Get single by id
 * Update single by id -> details like name and description 
 * Delete single by id
 
 * --- Book
 * Create/Post/add to an existing BookList
 *? Get single by id
 * Delete single by id
 
 *! What are my DB models/schema for BookList & Books?
 
 *! How are the respective collections structured in the DB? What is their relationship?
    - are they independent collections, using IDs as reference/lookup/foreign key
    - are they dependent - i.e. Books are nested in BookLists -> WARNING:  WILL INTRODUCE DUPLICATE DATA 
 
 *! How will all the books be stored in the DB 
 *! How am I going to fetch all the books in a list
    - I will store bookId's
    - bookId's can be retrieved and used to make BATCH of fetch calls to the Books API -> to get the actual book data

    - OR I can also store collection of Books in DB, whenever a user adds the book to a BookList -> essentially a cache of user-added books
    - then use bookId's to lookup the book in the Books collection
    - if the bookId does not exist in the Book collection, fetch it from the Books API and add it to the Books Collection
 */
// ------------------------------------------
/** NOTE: Opening a single Book List
 * /booklists/:listId
    - get single bookList -> includes: id, name, desc, array of books ids 
    - metadata (id, name, desc) etc. can be displayed in UI, while each book in the list is fetched
 * /booklists/:listId/books
    - array of book Ids (retrieved using /booklists/:listId) is sent to the server via this endpoint in the request body
    - the endpoint will handle making a fetch request for each id in the array -> using Promise.all()
    - NOTE: this has to occur on the server, because the API request URL requires an API key -> which is stored on the server

 *! When I use Promise.all() to make multiple fetch requests do I want to:

 *!  * fetch all books then return 
 *!    - /booklist/:listId/books
 *!    - makes single request to my API, but multiple requests to BOOKS API

 *!  * OR fetch and return each book individually
 *!    - /booklist/:listId/books/:bookId
 *!    - makes multiple requests to my API - a single request for each :bookId in booklist array
 *!    - each req to my API makes a single request to the Books API
 **    - Allows me to load each book in a booklist individually
 */

// NOTE: all endpoints are prefixed "/booklists" -> and so this portion can be omitted for endpoints in this file
// ----- booklists -----
// Create a new booklist
router.post("/", (req, res, next) => {});
// Get all booklists
router.get("/", (req, res, next) => {});

// --- Single booklist ---
// Get meta-data for a single booklist (id, name, description, booklist array)
router.get("/:listId", (req, res, next) => {});
// Update (or edit) a single booklist's details (name, description)
router.put("/:listId", (req, res, next) => {});
// Delete a single booklist (implicitly deletes all books in the list)
router.delete("/:listId", (req, res, next) => {});

// ----- Book(s) in a single booklist -----
// Create a book entry in a booklist (i.e. add book id to booklist array)
router.post("/:listId/books", (req, res, next) => {});

// Get a single book from a booklist
// NOTE: we can get all books corresponding to the ids in the booklist array by making multiple requests to this endpoint with Promise.all()
router.get("/:listId/books/:bookId", (req, res, next) => {});

// Delete a single book from a booklist
router.delete("/:listId/books/:bookId", (req, res, next) => {});

export default router;
